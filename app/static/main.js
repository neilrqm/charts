var chart = new Chart(document.getElementById('statsCanvas'), {
    type: 'line',
    data: { 
        datasets: []
    },
    options: {
        tension: .4,
        spanGaps: true,
    }
});

initialize();

function uri(endpoint) {
    // get an API URI for the given endpoint
    return `${location.protocol}//${location.host}/${endpoint}`
}

function genConfig() {
    // generate a bit string representing the state of cluster/nbhd checkboxes and other config values
    var config = 0n
    Array.from(document.querySelectorAll('input[name=areaCheckbox]'), (el) => {
        config <<= 1n
        config |= BigInt(el.checked)
    })
    return `${config}`
}

function loadConfig(config) {
    // given a bit field string as generated by genConfig, reproduce the state it was based on
    config = BigInt(config)
    var checkboxes = Array.from(document.querySelectorAll('input[name=areaCheckbox]')).reverse()
    checkboxes.forEach((el) => {
        el.checked = ((config & 1n) != 0n)
        config >>= 1n
    })
}

function initialize() {
    // query the API for a mapping of clusters to neighbourhoods, and then build checkbox selectors
    // for each neighbourhood, load config data, and generate the initial chart
    fetch(uri('stats/neighbourhood'), {
        method: "GET"
    }).then((response) => response.json())
      .then((json => buildAreaCheckboxes(json)))
      .then(() => loadConfig(getCookie('config')))
      .then(() => refreshChart())
}

function buildAreaCheckboxes(json) {
    var i = 0;
    areaList = document.getElementById('areaList')
    Object.entries(json).sort().forEach(([clusterGroup, clusterMap]) => {
        Object.entries(clusterMap).sort().forEach(([cluster, nbhds]) => {
            nbhds.sort().forEach((nbhd) => {
                let div = document.createElement('div')
                div.className = 'form-check'
                let input = document.createElement('input')
                input.className = 'form-check-input'
                input.type = 'checkbox'
                input.value = nbhd
                input.id = `area${i}Checkbox`
                input.name = 'areaCheckbox'
                input.onclick = onAreaCheckboxClick
                let label = document.createElement('label')
                label.className = 'form-check-label'
                label.setAttribute('for', `area${i}Checkbox`)
                label.innerText = `${nbhd} (${cluster})`
                div.appendChild(input)
                div.appendChild(label)
                areaList.appendChild(div)
                i++  // there's something wrong here, the ids and labels are wrong.
            })
        })

    })
}

function setCookie(cname, cvalue, exdays) {
    // from https://www.w3schools.com/js/js_cookies.asp
    // cname is cookie name, cvalue is cookie value, exdays is expiry time in days from now.
    const d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    let expires = "expires="+ d.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
}

function getCookie(cname) {
    // based on https://www.w3schools.com/js/js_cookies.asp
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let cookies = decodedCookie.split(';');
    for (let i = 0; i <cookies.length; i++) {
        let cookie = cookies[i].trim();
        if (cookie.indexOf(name) == 0) {
          return cookie.substring(name.length, cookie.length);
        }
      }
    return "";
}

function onAreaCheckboxClick() {
    var config = genConfig();
    setCookie('config', config, 365)
    refreshChart()
}

function refreshChart() {
    // get the stats for the checked neighbourhoods and set the chart data to the result
    fetch(uri('stats/neighbourhood'), {
      method: "POST",
      body: JSON.stringify({
          names: Array.from(document.querySelectorAll('input[name=areaCheckbox]:checked'), (el) => el.value),
          activities: ['dg'],
          stats_type: 0
      }),
      headers: {
          "Content-type": "application/json; charset=UTF-8"
      }
    }).then((response) => response.json())
      .then((json) => {
          //console.log(json)
          chart.data.datasets = Array.from(json, (el) => el.dataset)
          chart.update()
      });
}